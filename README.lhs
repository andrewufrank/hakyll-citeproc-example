hakyll-citeproc-example
=======================

The smallest possible example of how to do citations in Hakyll.  This literate
Haskell file contains the Hakyll code that generates the website.  The website
can be generated by doing something along the lines of:

    stack build            # Compile the website generator
    stack exec site build  # Run the website generator

There are a number of auxiliary files in this repository.

- `refs.bib` contains a bibliography;
- `page.markdown` references a paper from this bibliography;
- `default.html` is simple HTML template;
- `chicago.csl` is an example citation style found on the web.

The Hakyll website code follows and is fairly simple.

> {-# LANGUAGE OverloadedStrings #-}
> import Hakyll

> main :: IO ()
> main = hakyll $ do

We'll compile the simple HTML template.

>     match "default.html" $ compile templateCompiler

Next, we compile two auxiliary items that we will use later on.  By using Hakyll
compilers for this purpose we get nice dependency tracking for our bibliography
(e.g. regenerate the blogpost if the citation style changes).

>     match "chicago.csl" $ compile cslCompiler
>     match "refs.bib"    $ compile biblioCompiler

There is only single actual page on our website.

>     match "page.markdown" $ do
>         route $ setExtension "html"

We cannot use the standard `pandocCompiler` because we need to process the
references.  This is why we put together our own, accurately named
`myPandocBiblioCompiler`.

`loadAndApplyTemplate` is very standard and just applies our HTML template.

>         compile $
>             myPandocBiblioCompiler >>=
>             loadAndApplyTemplate "default.html" defaultContext

The bulk of the problem-related code is in the `myPandocBiblioCompiler`
definition.

> myPandocBiblioCompiler :: Compiler (Item String)
> myPandocBiblioCompiler = do

We load in the two auxiliary items.

>     csl <- load "chicago.csl"
>     bib <- load "refs.bib"

Rather than using the standard `pandocCompiler`, we use three simple steps:

1.  Read out the page as a `String` (`getResourceBody`);
2.  parse the `String` to a `Pandoc` document (with resolved references, using
    `readPandocBiblio`);
3.  write the `Pandoc` document back out to a `String` (`writePandoc`).

>     getResourceBody >>=
>         readPandocBiblio defaultHakyllReaderOptions csl bib >>=
>         return . writePandoc

That's all there is to it!
