hakyll-citeproc-example
=======================

The smalles possible example of how to do citations in Hakyll.  This file
contains the Hakyll source code that generates the website.  The website can be
generated by doing something along the lines of:

    stack build            # Compile the website generator
    stack exec site build  # Run the website generator

There are a number of auxiliary files in this repository.

- `refs.bib` contains a bibliography;
- `page.markdown` references a paper from this bibliography;
- `default.html` is simple HTML template;
- `chicago.csl` is an example citation style found on the web.

The Hakyll website code follows and is fairly simple.

> {-# LANGUAGE OverloadedStrings #-}
> import Hakyll

We have one function -- the main one.

> main :: IO ()
> main = hakyll $ do

We'll compile the simple HTML template.

>     match "default.html" $ compile templateBodyCompiler

Next, we compile two auxiliary items that we will use later on.  By using Hakyll
compilers for this purpose we get nice dependency tracking for our bibliography.

>     match "chicago.csl" $ compile cslCompiler
>     match "refs.bib" $ compile biblioCompiler

In our simple example, we just have a single page.

>     match "page.markdown" $ do
>         route   $ setExtension "html"
>         compile $ do

We load in the two auxiliary items.

>             csl <- load "chicago.csl"
>             bib <- load "refs.bib"

We cannot use the standard `pandocCompiler` because we need to process the
references.  This is we we put together our own, based on three simple steps:

1.  Read out the page as a `String` (`getResourceBody`)
2.  Parse the `String` to a `Pandoc` document (with resolved references, using
    `readPandocBiblio`).
3.  Write the `Pandoc` document back out to a `String` (`writePandoc`).

>             getResourceBody
>                 >>= readPandocBiblio defaultHakyllReaderOptions csl bib
>                 >>= return . writePandoc

The next line is fairly standard and applies our HTML template.

>                 >>= loadAndApplyTemplate "default.html" defaultContext

That's all there is to it!
